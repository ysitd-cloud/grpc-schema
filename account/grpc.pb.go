// Code generated by protoc-gen-go. DO NOT EDIT.
// source: account/grpc.proto

/*
Package account is a generated protocol buffer package.

It is generated from these files:
	account/grpc.proto

It has these top-level messages:
*/
package account

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import account2 "github.com/ysitd-cloud/grpc-schema/account/actions"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Account service

type AccountClient interface {
	ValidateUserPassword(ctx context.Context, in *account2.ValidateUserRequest, opts ...grpc.CallOption) (*account2.ValidateUserReply, error)
	GetUserInfo(ctx context.Context, in *account2.GetUserInfoRequest, opts ...grpc.CallOption) (*account2.GetUserInfoReply, error)
	GetTokenInfo(ctx context.Context, in *account2.GetTokenInfoRequest, opts ...grpc.CallOption) (*account2.GetTokenInfoReply, error)
}

type accountClient struct {
	cc *grpc.ClientConn
}

func NewAccountClient(cc *grpc.ClientConn) AccountClient {
	return &accountClient{cc}
}

func (c *accountClient) ValidateUserPassword(ctx context.Context, in *account2.ValidateUserRequest, opts ...grpc.CallOption) (*account2.ValidateUserReply, error) {
	out := new(account2.ValidateUserReply)
	err := grpc.Invoke(ctx, "/account.Account/validateUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetUserInfo(ctx context.Context, in *account2.GetUserInfoRequest, opts ...grpc.CallOption) (*account2.GetUserInfoReply, error) {
	out := new(account2.GetUserInfoReply)
	err := grpc.Invoke(ctx, "/account.Account/getUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountClient) GetTokenInfo(ctx context.Context, in *account2.GetTokenInfoRequest, opts ...grpc.CallOption) (*account2.GetTokenInfoReply, error) {
	out := new(account2.GetTokenInfoReply)
	err := grpc.Invoke(ctx, "/account.Account/getTokenInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Account service

type AccountServer interface {
	ValidateUserPassword(context.Context, *account2.ValidateUserRequest) (*account2.ValidateUserReply, error)
	GetUserInfo(context.Context, *account2.GetUserInfoRequest) (*account2.GetUserInfoReply, error)
	GetTokenInfo(context.Context, *account2.GetTokenInfoRequest) (*account2.GetTokenInfoReply, error)
}

func RegisterAccountServer(s *grpc.Server, srv AccountServer) {
	s.RegisterService(&_Account_serviceDesc, srv)
}

func _Account_ValidateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account2.ValidateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).ValidateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/ValidateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).ValidateUserPassword(ctx, req.(*account2.ValidateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account2.GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetUserInfo(ctx, req.(*account2.GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Account_GetTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account2.GetTokenInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServer).GetTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.Account/GetTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServer).GetTokenInfo(ctx, req.(*account2.GetTokenInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Account_serviceDesc = grpc.ServiceDesc{
	ServiceName: "account.Account",
	HandlerType: (*AccountServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "validateUserPassword",
			Handler:    _Account_ValidateUserPassword_Handler,
		},
		{
			MethodName: "getUserInfo",
			Handler:    _Account_GetUserInfo_Handler,
		},
		{
			MethodName: "getTokenInfo",
			Handler:    _Account_GetTokenInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/grpc.proto",
}

func init() { proto.RegisterFile("account/grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xc1, 0x4e, 0x03, 0x21,
	0x14, 0x45, 0xed, 0xc6, 0x26, 0xd8, 0x15, 0x71, 0xa1, 0x63, 0xdd, 0xb8, 0x34, 0x29, 0x93, 0xe8,
	0x17, 0xd8, 0x4d, 0xa3, 0xab, 0x49, 0xa3, 0x5d, 0xb8, 0xa3, 0xf0, 0xa4, 0xc4, 0x29, 0x6f, 0x84,
	0x87, 0xa6, 0xbf, 0xed, 0x17, 0x98, 0x32, 0x50, 0xc7, 0xa8, 0x4b, 0xee, 0x3d, 0xef, 0x86, 0x1c,
	0xc6, 0xa5, 0x52, 0x18, 0x1d, 0xd5, 0xc6, 0x77, 0x4a, 0x74, 0x1e, 0x09, 0xf9, 0x38, 0x67, 0xd5,
	0x65, 0x29, 0xa5, 0x22, 0x8b, 0x2e, 0xd4, 0xf9, 0xdd, 0x73, 0x37, 0x9f, 0x23, 0x36, 0xbe, 0xeb,
	0x13, 0xbe, 0x64, 0xa7, 0xef, 0xb2, 0xb5, 0x5a, 0x12, 0x3c, 0x05, 0xf0, 0x8d, 0x0c, 0xe1, 0x03,
	0xbd, 0xe6, 0x53, 0x51, 0x6e, 0x56, 0x83, 0x7a, 0x09, 0x6f, 0x11, 0x02, 0x55, 0xd5, 0x3f, 0x6d,
	0xd7, 0xee, 0xae, 0x8e, 0xf8, 0x82, 0x9d, 0x18, 0xa0, 0x7d, 0x72, 0xef, 0x5e, 0x90, 0x5f, 0x1c,
	0xe0, 0xc5, 0x77, 0x5a, 0x96, 0xce, 0xff, 0x2e, 0xfb, 0xa1, 0x07, 0x36, 0x31, 0x40, 0x8f, 0xf8,
	0x0a, 0x2e, 0x2d, 0x4d, 0x87, 0xf0, 0x21, 0xfe, 0xfd, 0xa9, 0x9f, 0x6d, 0xda, 0x9a, 0xaf, 0xd8,
	0x99, 0x6a, 0x31, 0x6a, 0xb1, 0x0b, 0x96, 0xb4, 0x48, 0xda, 0x32, 0x3f, 0x9f, 0x64, 0x1b, 0xcd,
	0x5e, 0x4f, 0x33, 0x7a, 0xbe, 0x36, 0x96, 0x36, 0x71, 0x2d, 0x14, 0x6e, 0xeb, 0x84, 0xcf, 0xd2,
	0x69, 0x72, 0x3d, 0x0b, 0x6a, 0x03, 0x5b, 0x59, 0x94, 0xae, 0x8f, 0x93, 0xd3, 0xdb, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xfa, 0x6f, 0xfb, 0x7a, 0x91, 0x01, 0x00, 0x00,
}
