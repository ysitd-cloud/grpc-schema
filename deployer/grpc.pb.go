// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deployer/grpc.proto

/*
Package deployer is a generated protocol buffer package.

It is generated from these files:
	deployer/grpc.proto

It has these top-level messages:
*/
package deployer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import deployer2 "github.com/ysitd-cloud/grpc-schema/deployer/actions"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Deployer service

type DeployerClient interface {
	ListApplicationsByUsername(ctx context.Context, in *deployer2.ListApplicationsByUsernameRequest, opts ...grpc.CallOption) (*deployer2.ListApplicationsByUsernameReply, error)
	CreateApplication(ctx context.Context, in *deployer2.CreateApplicationRequest, opts ...grpc.CallOption) (*deployer2.CreateApplicationReply, error)
	UpdateDeploymentImage(ctx context.Context, in *deployer2.UpdateDeploymentImageRequest, opts ...grpc.CallOption) (*deployer2.UpdateDeploymentImageReply, error)
	GetApplicationById(ctx context.Context, in *deployer2.GetApplicationByIdRequest, opts ...grpc.CallOption) (*deployer2.GetApplicationByIdResponse, error)
}

type deployerClient struct {
	cc *grpc.ClientConn
}

func NewDeployerClient(cc *grpc.ClientConn) DeployerClient {
	return &deployerClient{cc}
}

func (c *deployerClient) ListApplicationsByUsername(ctx context.Context, in *deployer2.ListApplicationsByUsernameRequest, opts ...grpc.CallOption) (*deployer2.ListApplicationsByUsernameReply, error) {
	out := new(deployer2.ListApplicationsByUsernameReply)
	err := grpc.Invoke(ctx, "/deployer.Deployer/listApplicationsByUsername", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerClient) CreateApplication(ctx context.Context, in *deployer2.CreateApplicationRequest, opts ...grpc.CallOption) (*deployer2.CreateApplicationReply, error) {
	out := new(deployer2.CreateApplicationReply)
	err := grpc.Invoke(ctx, "/deployer.Deployer/createApplication", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerClient) UpdateDeploymentImage(ctx context.Context, in *deployer2.UpdateDeploymentImageRequest, opts ...grpc.CallOption) (*deployer2.UpdateDeploymentImageReply, error) {
	out := new(deployer2.UpdateDeploymentImageReply)
	err := grpc.Invoke(ctx, "/deployer.Deployer/updateDeploymentImage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployerClient) GetApplicationById(ctx context.Context, in *deployer2.GetApplicationByIdRequest, opts ...grpc.CallOption) (*deployer2.GetApplicationByIdResponse, error) {
	out := new(deployer2.GetApplicationByIdResponse)
	err := grpc.Invoke(ctx, "/deployer.Deployer/getApplicationById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deployer service

type DeployerServer interface {
	ListApplicationsByUsername(context.Context, *deployer2.ListApplicationsByUsernameRequest) (*deployer2.ListApplicationsByUsernameReply, error)
	CreateApplication(context.Context, *deployer2.CreateApplicationRequest) (*deployer2.CreateApplicationReply, error)
	UpdateDeploymentImage(context.Context, *deployer2.UpdateDeploymentImageRequest) (*deployer2.UpdateDeploymentImageReply, error)
	GetApplicationById(context.Context, *deployer2.GetApplicationByIdRequest) (*deployer2.GetApplicationByIdResponse, error)
}

func RegisterDeployerServer(s *grpc.Server, srv DeployerServer) {
	s.RegisterService(&_Deployer_serviceDesc, srv)
}

func _Deployer_ListApplicationsByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployer2.ListApplicationsByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).ListApplicationsByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployer.Deployer/ListApplicationsByUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).ListApplicationsByUsername(ctx, req.(*deployer2.ListApplicationsByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployer_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployer2.CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployer.Deployer/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).CreateApplication(ctx, req.(*deployer2.CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployer_UpdateDeploymentImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployer2.UpdateDeploymentImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).UpdateDeploymentImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployer.Deployer/UpdateDeploymentImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).UpdateDeploymentImage(ctx, req.(*deployer2.UpdateDeploymentImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployer_GetApplicationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(deployer2.GetApplicationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployerServer).GetApplicationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployer.Deployer/GetApplicationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployerServer).GetApplicationById(ctx, req.(*deployer2.GetApplicationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deployer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deployer.Deployer",
	HandlerType: (*DeployerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "listApplicationsByUsername",
			Handler:    _Deployer_ListApplicationsByUsername_Handler,
		},
		{
			MethodName: "createApplication",
			Handler:    _Deployer_CreateApplication_Handler,
		},
		{
			MethodName: "updateDeploymentImage",
			Handler:    _Deployer_UpdateDeploymentImage_Handler,
		},
		{
			MethodName: "getApplicationById",
			Handler:    _Deployer_GetApplicationById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deployer/grpc.proto",
}

func init() { proto.RegisterFile("deployer/grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 281 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x5f, 0x4b, 0xc3, 0x40,
	0x10, 0xc4, 0x2b, 0x82, 0x94, 0x03, 0x1f, 0x3c, 0x11, 0xa4, 0x20, 0x48, 0x14, 0x41, 0x4a, 0x2f,
	0xa0, 0x9f, 0xc0, 0x28, 0x48, 0xc1, 0x87, 0x22, 0x14, 0x44, 0x9f, 0xb6, 0x9b, 0x25, 0x0d, 0x24,
	0xb9, 0x33, 0xbb, 0x11, 0xf2, 0x99, 0xfc, 0x92, 0xe2, 0xc5, 0x33, 0x45, 0xe3, 0x9f, 0xd7, 0x9b,
	0xdf, 0xcc, 0x70, 0xcc, 0xaa, 0xfd, 0x94, 0x5c, 0x61, 0x5b, 0xaa, 0xe3, 0xac, 0x76, 0x68, 0x5c,
	0x6d, 0xc5, 0xea, 0x71, 0x78, 0x9c, 0x1c, 0x7d, 0xca, 0x80, 0x92, 0xdb, 0x8a, 0x63, 0x40, 0x24,
	0xe6, 0x0e, 0xbc, 0x78, 0xdd, 0x56, 0xe3, 0x9b, 0x0f, 0x42, 0xbf, 0xa8, 0x49, 0x91, 0xb3, 0x5c,
	0x39, 0x57, 0xe4, 0x08, 0x9e, 0x4e, 0xda, 0x25, 0x53, 0x5d, 0x41, 0x49, 0x7a, 0x6a, 0x42, 0x94,
	0xb9, 0xfb, 0x91, 0xba, 0xa7, 0xe7, 0x86, 0x58, 0x26, 0xe7, 0xff, 0x83, 0x5d, 0xd1, 0x46, 0x23,
	0xfd, 0xa4, 0xf6, 0xb0, 0x26, 0x10, 0xda, 0xc0, 0x74, 0xd4, 0x27, 0x5c, 0x7f, 0x15, 0x43, 0xcb,
	0xf1, 0xaf, 0x4c, 0x17, 0x9e, 0xa9, 0x83, 0xc6, 0xa5, 0x20, 0xd4, 0x7d, 0xb3, 0xa4, 0x4a, 0xe6,
	0x25, 0x64, 0xa4, 0xcf, 0x7a, 0xf3, 0x72, 0x08, 0x08, 0x25, 0xa7, 0x7f, 0x72, 0x5d, 0x11, 0x28,
	0x9d, 0xd1, 0xe6, 0x4f, 0x93, 0x76, 0x9e, 0xea, 0x93, 0xde, 0x7d, 0xfb, 0x4d, 0x1d, 0xa8, 0x18,
	0x82, 0xd8, 0xd9, 0x8a, 0x29, 0x1a, 0x25, 0x0f, 0xea, 0x10, 0x0b, 0xdb, 0xa4, 0xa6, 0xe5, 0x5c,
	0x52, 0xe3, 0x07, 0x07, 0x44, 0xdb, 0x54, 0x92, 0xec, 0x86, 0x19, 0x17, 0xef, 0xc3, 0x2e, 0xb6,
	0x1e, 0xa7, 0x59, 0x2e, 0xeb, 0x66, 0x65, 0xd0, 0x96, 0xb1, 0xe7, 0x67, 0xde, 0xeb, 0xcf, 0x64,
	0xc6, 0xb8, 0xa6, 0x12, 0xe2, 0x50, 0xbb, 0xda, 0xf1, 0xe7, 0x70, 0xf9, 0x16, 0x00, 0x00, 0xff,
	0xff, 0x64, 0x9e, 0x18, 0x53, 0x4e, 0x02, 0x00, 0x00,
}
