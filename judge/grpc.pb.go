// Code generated by protoc-gen-go. DO NOT EDIT.
// source: judge/grpc.proto

/*
Package judge is a generated protocol buffer package.

It is generated from these files:
	judge/grpc.proto

It has these top-level messages:
*/
package judge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import judge1 "judge"
import judge2 "judge"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Judge service

type JudgeClient interface {
	// Subject CURD
	CreateSubject(ctx context.Context, in *judge1.Subject, opts ...grpc.CallOption) (*judge1.SubjectMutationReply, error)
	DeleteSubject(ctx context.Context, in *judge1.SubjectSelector, opts ...grpc.CallOption) (*judge1.SubjectMutationReply, error)
	UpdateSubject(ctx context.Context, in *judge1.UpdateSubjectRequest, opts ...grpc.CallOption) (*judge1.SubjectMutationReply, error)
	GetSubject(ctx context.Context, in *judge1.SubjectSelector, opts ...grpc.CallOption) (*judge1.Subject, error)
	// Judge Service
	ValidatePolicy(ctx context.Context, in *judge2.AccessRequest, opts ...grpc.CallOption) (*judge2.AccessReply, error)
}

type judgeClient struct {
	cc *grpc.ClientConn
}

func NewJudgeClient(cc *grpc.ClientConn) JudgeClient {
	return &judgeClient{cc}
}

func (c *judgeClient) CreateSubject(ctx context.Context, in *judge1.Subject, opts ...grpc.CallOption) (*judge1.SubjectMutationReply, error) {
	out := new(judge1.SubjectMutationReply)
	err := grpc.Invoke(ctx, "/judge.Judge/createSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) DeleteSubject(ctx context.Context, in *judge1.SubjectSelector, opts ...grpc.CallOption) (*judge1.SubjectMutationReply, error) {
	out := new(judge1.SubjectMutationReply)
	err := grpc.Invoke(ctx, "/judge.Judge/deleteSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) UpdateSubject(ctx context.Context, in *judge1.UpdateSubjectRequest, opts ...grpc.CallOption) (*judge1.SubjectMutationReply, error) {
	out := new(judge1.SubjectMutationReply)
	err := grpc.Invoke(ctx, "/judge.Judge/updateSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) GetSubject(ctx context.Context, in *judge1.SubjectSelector, opts ...grpc.CallOption) (*judge1.Subject, error) {
	out := new(judge1.Subject)
	err := grpc.Invoke(ctx, "/judge.Judge/getSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *judgeClient) ValidatePolicy(ctx context.Context, in *judge2.AccessRequest, opts ...grpc.CallOption) (*judge2.AccessReply, error) {
	out := new(judge2.AccessReply)
	err := grpc.Invoke(ctx, "/judge.Judge/validatePolicy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Judge service

type JudgeServer interface {
	// Subject CURD
	CreateSubject(context.Context, *judge1.Subject) (*judge1.SubjectMutationReply, error)
	DeleteSubject(context.Context, *judge1.SubjectSelector) (*judge1.SubjectMutationReply, error)
	UpdateSubject(context.Context, *judge1.UpdateSubjectRequest) (*judge1.SubjectMutationReply, error)
	GetSubject(context.Context, *judge1.SubjectSelector) (*judge1.Subject, error)
	// Judge Service
	ValidatePolicy(context.Context, *judge2.AccessRequest) (*judge2.AccessReply, error)
}

func RegisterJudgeServer(s *grpc.Server, srv JudgeServer) {
	s.RegisterService(&_Judge_serviceDesc, srv)
}

func _Judge_CreateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(judge1.Subject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).CreateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.Judge/CreateSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).CreateSubject(ctx, req.(*judge1.Subject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Judge_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(judge1.SubjectSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.Judge/DeleteSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).DeleteSubject(ctx, req.(*judge1.SubjectSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Judge_UpdateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(judge1.UpdateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).UpdateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.Judge/UpdateSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).UpdateSubject(ctx, req.(*judge1.UpdateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Judge_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(judge1.SubjectSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.Judge/GetSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).GetSubject(ctx, req.(*judge1.SubjectSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Judge_ValidatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(judge2.AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JudgeServer).ValidatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.Judge/ValidatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JudgeServer).ValidatePolicy(ctx, req.(*judge2.AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Judge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "judge.Judge",
	HandlerType: (*JudgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSubject",
			Handler:    _Judge_CreateSubject_Handler,
		},
		{
			MethodName: "deleteSubject",
			Handler:    _Judge_DeleteSubject_Handler,
		},
		{
			MethodName: "updateSubject",
			Handler:    _Judge_UpdateSubject_Handler,
		},
		{
			MethodName: "getSubject",
			Handler:    _Judge_GetSubject_Handler,
		},
		{
			MethodName: "validatePolicy",
			Handler:    _Judge_ValidatePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "judge/grpc.proto",
}

func init() { proto.RegisterFile("judge/grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x2a, 0x4d, 0x49,
	0x4f, 0xd5, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x8b,
	0x48, 0x09, 0x43, 0x24, 0x8a, 0x4b, 0x93, 0xb2, 0x52, 0x93, 0x4b, 0x20, 0x72, 0x52, 0x82, 0x10,
	0x41, 0x30, 0x09, 0x11, 0x32, 0xba, 0xc4, 0xc4, 0xc5, 0xea, 0x05, 0xe2, 0x0b, 0xd9, 0x71, 0xf1,
	0x26, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x06, 0x43, 0xf4, 0x08, 0xf1, 0xe9, 0x41, 0x14, 0x42, 0xf9,
	0x52, 0xd2, 0xa8, 0x7c, 0xdf, 0xd2, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0xa0, 0xd4, 0x82, 0x9c,
	0x4a, 0x25, 0x06, 0x21, 0x37, 0x2e, 0xde, 0x94, 0xd4, 0x9c, 0x54, 0x84, 0x7e, 0x31, 0x54, 0xf5,
	0xc1, 0xa9, 0x39, 0xa9, 0xc9, 0x25, 0xf9, 0x45, 0x84, 0xcc, 0xf1, 0xe6, 0xe2, 0x2d, 0x2d, 0x48,
	0x41, 0x72, 0x07, 0x4c, 0x7d, 0x28, 0xb2, 0x68, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x31, 0x41, 0x47,
	0x99, 0x71, 0x71, 0xa5, 0xa7, 0x96, 0x10, 0x72, 0x11, 0x9a, 0x4f, 0x95, 0x18, 0x84, 0x6c, 0xb8,
	0xf8, 0xca, 0x12, 0x73, 0x32, 0x41, 0x16, 0x06, 0xe4, 0xe7, 0x64, 0x26, 0x57, 0x0a, 0x89, 0x40,
	0xd5, 0x38, 0x26, 0x27, 0xa7, 0x16, 0x17, 0xc3, 0xac, 0x17, 0x42, 0x13, 0x05, 0xdb, 0xea, 0xa4,
	0xc6, 0x25, 0x96, 0x9c, 0x93, 0x5f, 0x9a, 0xa2, 0x57, 0x59, 0x9c, 0x59, 0x92, 0xa2, 0x07, 0x8e,
	0x1d, 0xb0, 0x3a, 0x27, 0x2e, 0x70, 0x58, 0x07, 0x80, 0x82, 0x3e, 0x80, 0x31, 0x89, 0x0d, 0x1c,
	0x07, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0x2d, 0xde, 0x52, 0xc6, 0x01, 0x00, 0x00,
}
