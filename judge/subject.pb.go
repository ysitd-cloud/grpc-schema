// Code generated by protoc-gen-go. DO NOT EDIT.
// source: judge/subject.proto

/*
Package judge is a generated protocol buffer package.

It is generated from these files:
	judge/subject.proto

It has these top-level messages:
	Subject
	SubjectSelector
	UpdateSubjectRequest
	SubjectMutationReply
*/
package judge

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubjectType int32

const (
	SubjectType_APP  SubjectType = 0
	SubjectType_USER SubjectType = 1
)

var SubjectType_name = map[int32]string{
	0: "APP",
	1: "USER",
}
var SubjectType_value = map[string]int32{
	"APP":  0,
	"USER": 1,
}

func (x SubjectType) String() string {
	return proto.EnumName(SubjectType_name, int32(x))
}
func (SubjectType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Subject struct {
	Id   string      `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type SubjectType `protobuf:"varint,2,opt,name=type,enum=judge.SubjectType" json:"type,omitempty"`
}

func (m *Subject) Reset()                    { *m = Subject{} }
func (m *Subject) String() string            { return proto.CompactTextString(m) }
func (*Subject) ProtoMessage()               {}
func (*Subject) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Subject) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Subject) GetType() SubjectType {
	if m != nil {
		return m.Type
	}
	return SubjectType_APP
}

type SubjectSelector struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *SubjectSelector) Reset()                    { *m = SubjectSelector{} }
func (m *SubjectSelector) String() string            { return proto.CompactTextString(m) }
func (*SubjectSelector) ProtoMessage()               {}
func (*SubjectSelector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubjectSelector) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type UpdateSubjectRequest struct {
	Selector *SubjectSelector `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
	Content  *Subject         `protobuf:"bytes,2,opt,name=content" json:"content,omitempty"`
}

func (m *UpdateSubjectRequest) Reset()                    { *m = UpdateSubjectRequest{} }
func (m *UpdateSubjectRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSubjectRequest) ProtoMessage()               {}
func (*UpdateSubjectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UpdateSubjectRequest) GetSelector() *SubjectSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *UpdateSubjectRequest) GetContent() *Subject {
	if m != nil {
		return m.Content
	}
	return nil
}

type SubjectMutationReply struct {
	Error   bool `protobuf:"varint,1,opt,name=error" json:"error,omitempty"`
	Message bool `protobuf:"varint,2,opt,name=message" json:"message,omitempty"`
}

func (m *SubjectMutationReply) Reset()                    { *m = SubjectMutationReply{} }
func (m *SubjectMutationReply) String() string            { return proto.CompactTextString(m) }
func (*SubjectMutationReply) ProtoMessage()               {}
func (*SubjectMutationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubjectMutationReply) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *SubjectMutationReply) GetMessage() bool {
	if m != nil {
		return m.Message
	}
	return false
}

func init() {
	proto.RegisterType((*Subject)(nil), "judge.Subject")
	proto.RegisterType((*SubjectSelector)(nil), "judge.SubjectSelector")
	proto.RegisterType((*UpdateSubjectRequest)(nil), "judge.UpdateSubjectRequest")
	proto.RegisterType((*SubjectMutationReply)(nil), "judge.SubjectMutationReply")
	proto.RegisterEnum("judge.SubjectType", SubjectType_name, SubjectType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SubjectManage service

type SubjectManageClient interface {
	CreateSubject(ctx context.Context, in *Subject, opts ...grpc.CallOption) (*SubjectMutationReply, error)
	DeleteSubject(ctx context.Context, in *SubjectSelector, opts ...grpc.CallOption) (*SubjectMutationReply, error)
	UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*SubjectMutationReply, error)
	GetSubject(ctx context.Context, in *SubjectSelector, opts ...grpc.CallOption) (*Subject, error)
}

type subjectManageClient struct {
	cc *grpc.ClientConn
}

func NewSubjectManageClient(cc *grpc.ClientConn) SubjectManageClient {
	return &subjectManageClient{cc}
}

func (c *subjectManageClient) CreateSubject(ctx context.Context, in *Subject, opts ...grpc.CallOption) (*SubjectMutationReply, error) {
	out := new(SubjectMutationReply)
	err := grpc.Invoke(ctx, "/judge.SubjectManage/createSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectManageClient) DeleteSubject(ctx context.Context, in *SubjectSelector, opts ...grpc.CallOption) (*SubjectMutationReply, error) {
	out := new(SubjectMutationReply)
	err := grpc.Invoke(ctx, "/judge.SubjectManage/deleteSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectManageClient) UpdateSubject(ctx context.Context, in *UpdateSubjectRequest, opts ...grpc.CallOption) (*SubjectMutationReply, error) {
	out := new(SubjectMutationReply)
	err := grpc.Invoke(ctx, "/judge.SubjectManage/updateSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subjectManageClient) GetSubject(ctx context.Context, in *SubjectSelector, opts ...grpc.CallOption) (*Subject, error) {
	out := new(Subject)
	err := grpc.Invoke(ctx, "/judge.SubjectManage/getSubject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SubjectManage service

type SubjectManageServer interface {
	CreateSubject(context.Context, *Subject) (*SubjectMutationReply, error)
	DeleteSubject(context.Context, *SubjectSelector) (*SubjectMutationReply, error)
	UpdateSubject(context.Context, *UpdateSubjectRequest) (*SubjectMutationReply, error)
	GetSubject(context.Context, *SubjectSelector) (*Subject, error)
}

func RegisterSubjectManageServer(s *grpc.Server, srv SubjectManageServer) {
	s.RegisterService(&_SubjectManage_serviceDesc, srv)
}

func _SubjectManage_CreateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectManageServer).CreateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.SubjectManage/CreateSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectManageServer).CreateSubject(ctx, req.(*Subject))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectManage_DeleteSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectManageServer).DeleteSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.SubjectManage/DeleteSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectManageServer).DeleteSubject(ctx, req.(*SubjectSelector))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectManage_UpdateSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectManageServer).UpdateSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.SubjectManage/UpdateSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectManageServer).UpdateSubject(ctx, req.(*UpdateSubjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubjectManage_GetSubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubjectSelector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubjectManageServer).GetSubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/judge.SubjectManage/GetSubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubjectManageServer).GetSubject(ctx, req.(*SubjectSelector))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubjectManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "judge.SubjectManage",
	HandlerType: (*SubjectManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createSubject",
			Handler:    _SubjectManage_CreateSubject_Handler,
		},
		{
			MethodName: "deleteSubject",
			Handler:    _SubjectManage_DeleteSubject_Handler,
		},
		{
			MethodName: "updateSubject",
			Handler:    _SubjectManage_UpdateSubject_Handler,
		},
		{
			MethodName: "getSubject",
			Handler:    _SubjectManage_GetSubject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "judge/subject.proto",
}

func init() { proto.RegisterFile("judge/subject.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0x4f, 0xb3, 0x40,
	0x10, 0x2d, 0x7c, 0xed, 0x07, 0x4e, 0xa5, 0x36, 0x63, 0xd3, 0x34, 0x7a, 0xa9, 0x1c, 0x0c, 0xf1,
	0x80, 0x09, 0x26, 0x1e, 0x4d, 0xda, 0xc4, 0x5e, 0x8c, 0x09, 0xd9, 0xda, 0x1f, 0x40, 0x61, 0x42,
	0x68, 0x10, 0x10, 0x86, 0x03, 0xff, 0xc5, 0x1f, 0x6b, 0x84, 0xc5, 0x96, 0x46, 0xd3, 0xe3, 0xbc,
	0x7d, 0xef, 0xcd, 0x7b, 0xbb, 0x0b, 0x97, 0xbb, 0x32, 0x08, 0xe9, 0xbe, 0x28, 0xb7, 0x3b, 0xf2,
	0xd9, 0xce, 0xf2, 0x94, 0x53, 0x1c, 0xd4, 0xa0, 0xb9, 0x00, 0x6d, 0xdd, 0xe0, 0x38, 0x02, 0x35,
	0x0a, 0x66, 0xca, 0x5c, 0xb1, 0xce, 0x84, 0x1a, 0x05, 0x78, 0x0b, 0x7d, 0xae, 0x32, 0x9a, 0xa9,
	0x73, 0xc5, 0x1a, 0x39, 0x68, 0xd7, 0x02, 0x5b, 0xb2, 0xdf, 0xaa, 0x8c, 0x44, 0x7d, 0x6e, 0xde,
	0xc0, 0x85, 0x04, 0xd7, 0x14, 0x93, 0xcf, 0x69, 0x7e, 0x6c, 0x65, 0x32, 0x4c, 0x36, 0x59, 0xe0,
	0x31, 0x49, 0xa2, 0xa0, 0x8f, 0x92, 0x0a, 0x46, 0x07, 0xf4, 0x42, 0x6a, 0x6a, 0xf6, 0xd0, 0x99,
	0x76, 0xd7, 0xb4, 0x8e, 0xe2, 0x87, 0x87, 0x16, 0x68, 0x7e, 0x9a, 0x30, 0x25, 0x5c, 0x27, 0x1b,
	0x3a, 0xa3, 0xae, 0x44, 0xb4, 0xc7, 0xe6, 0x0a, 0x26, 0x12, 0x7b, 0x2d, 0xd9, 0xe3, 0x28, 0x4d,
	0x04, 0x65, 0x71, 0x85, 0x13, 0x18, 0x50, 0x9e, 0xcb, 0x95, 0xba, 0x68, 0x06, 0x9c, 0x81, 0xf6,
	0x4e, 0x45, 0xe1, 0x85, 0x4d, 0x63, 0x5d, 0xb4, 0xe3, 0xdd, 0x1c, 0x86, 0x07, 0xad, 0x51, 0x83,
	0x7f, 0x0b, 0xd7, 0x1d, 0xf7, 0x50, 0x87, 0xfe, 0x66, 0xfd, 0x2c, 0xc6, 0x8a, 0xf3, 0xa9, 0x82,
	0xd1, 0xae, 0xf2, 0x12, 0x2f, 0x24, 0x7c, 0x02, 0xc3, 0xcf, 0x69, 0xdf, 0x18, 0x8f, 0x52, 0x5e,
	0x5d, 0x77, 0xe7, 0x4e, 0x42, 0xb3, 0x87, 0x2b, 0x30, 0x02, 0x8a, 0x69, 0xaf, 0xff, 0xe3, 0x62,
	0x4e, 0xf9, 0xbc, 0x80, 0x51, 0x1e, 0xde, 0x3c, 0xb6, 0xfc, 0xdf, 0xde, 0xe3, 0x94, 0xd9, 0x23,
	0x40, 0x48, 0x7c, 0x2a, 0xd1, 0x51, 0x53, 0xb3, 0xb7, 0xb4, 0x60, 0xea, 0xc7, 0x69, 0x19, 0xd8,
	0x55, 0x11, 0x71, 0x60, 0x87, 0x79, 0xe6, 0x37, 0x9c, 0xe5, 0xb9, 0x24, 0xb9, 0xdf, 0x7f, 0xd2,
	0x55, 0xb6, 0xff, 0xeb, 0xcf, 0xf9, 0xf0, 0x15, 0x00, 0x00, 0xff, 0xff, 0x30, 0x55, 0x3a, 0x8d,
	0xb3, 0x02, 0x00, 0x00,
}
